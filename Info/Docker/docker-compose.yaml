services:
  web:
    image: "cmontes90/webapp"
  database:
    image: "mongodb"
  messaging:
    image: "redis:alpine"
  orchestration:
    image: "ansible"

docker-compose up
## Run this command to bring up all the application stack
## all images and containers must be in the same host in order to work

### WITHOUT DOCKER COMPOSE ###

docker run -d --name=redis redis
docker run -d --name=db postgress:9.4
docker run -d --name=vote -p 5000:80 --link redis:redis voting-app
docker run -d --name=result -p 5001:80 --link db:db result-app
docker run -d --name=worker --link db:db --link redis:redis worker

### WITH DOCKER COMPOSE V1 ### you are not able to indicate dependencies, connect containers with links

redis:
  image: redis
db:
  image: postgres:9.4
vote:
  build: ./vote # it will build the custom image from this directory and then it will deploy containers
  ports: 
    - 5000:80
  links:
    - redis 
result:
  buid: ./result 
  ports: 
    - 5001:80
  links:
    - db
worker:
  build: ./worker
  links:
    - redis
    - db

docker-compose up

### WITH DOCKER COMPOSE V2 ### You are able to indicate dependecies between containers, no need for links

version: 2
Services:
  redis:
    image: redis
  db:
    image: postgres:9.4
  vote:
    build: ./vote # it will build the custom image from this directory and then it will deploy containers
    ports: 
      - 5000:80
    depends_on:
      - redis
  result:
    buid: ./result 
    ports: 
      - 5001:80
    depends_on:
      - db
  worker:
    build: ./worker

docker-compose up
docker-compose up --detach
docker-compose up --d
docker-compose ps # list the containers created by compose file
docker-compose logs # check the logs for the whole stack defined inside compose file
docker-compose stop # stop (only and not delete) the whole stack of containers created by compose file
docker-compose down # Stop and remove containers, networks, images, and volumes
docker-compose top # to see the running process inside of containers created by compose file

### WITH DOCKER COMPOSE V3 ### You are able to indicate dependecies between containers, no need for links, docker swarm supported

version: 3
Services:
  redis:
    image: redis
  db:
    image: postgres:9.4
  vote:
    build: ./vote # it will build the custom image from this directory and then it will deploy containers
    ports: 
      - 5000:80
    depends_on:
      - redis
  result:
    buid: ./result 
    ports: 
      - 5001:80
    depends_on:
      - db
  worker:
    build: ./worker

### WITH DOCKER COMPOSE V3 with networks (not using the default BRIDGE NETWORK) ### 

version: 3
Services:

  redis:
    image: redis
    networks:
      - back-end
  
  db:
    image: postgres:9.4
    networks:
      - back-end
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
  
  vote:
    build: ./vote # it will build the custom image from this directory and then it will deploy containers
    ports: 
      - 5000:80
    depends_on:
      - redis
    networks:
      - front-end
      - back-end
  
  result:
    buid: ./result 
    ports: 
      - 5001:80
    depends_on:
      - db
    networks:
      - front-end
      - back-end
 
  worker:
    build: ./worker
    networks:
      - front-end
      - back-end

networks:
  front-end:
  back-end:



  
### DOCKER COMPOSE V3 using the Docker Swarm features ### 

version: 3
Services:

  redis:
    image: redis
    networks:
      - back-end
    
    deploy:
      replicas: 1
  
  db:
    image: postgres:9.4
    networks:
      - back-end
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  
  vote:
    build: ./vote # it will build the custom image from this directory and then it will deploy containers
    ports: 
      - 5000:80
    depends_on:
      - redis
    networks:
      - front-end
      - back-end
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpu: 0.01
          memory: 50M

  
  result:
    buid: ./result 
    ports: 
      - 5001:80
    depends_on:
      - db
    networks:
      - front-end
      - back-end
    
    deploy:
      replicas: 1

 
  worker:
    build: ./worker
    networks:
      - front-end
      - back-end
    
    deploy:
      replicas: 1

networks:
  front-end:
  back-end:

docker stack deploy --compose-file docker-compose.yaml
cat docker-compose.yml | docker stack deploy --compose-file - STACKDEMO
docker stack ls
docker stack services
docker stack ps
docker stack rm